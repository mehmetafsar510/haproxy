#---------------------------------------------------------------------
# General Settings
#---------------------------------------------------------------------
global
    log         127.0.0.1 local1 debug
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4800
#    stats       bind-process 4
#    stats       socket /var/lib/haproxy/admin.sock mode 600 level admin process 1
#    stats       socket /var/lib/haproxy/stats2.sock mode 600 level admin process 2
#    stats       socket /var/lib/haproxy/stats3.sock mode 600 level admin process 3
#    stats       socket /var/lib/haproxy/stats4.sock mode 600 level admin process 4
    stats timeout 30s
    user        haproxy
    group       haproxy
    daemon
#    nbproc      4
#    cpu-map     1 0
#    cpu-map     2 1
#    cpu-map     3 2
#    cpu-map     4 3

    nbthread 16
# https://cbonte.github.io/haproxy-dconv/2.0/configuration.html#nbthread

    # intermediate configuration
    # generated 2020-05-12, Mozilla Guideline v5.4, HAProxy 1.8.8, OpenSSL 1.1.1, intermediate configuration, no OCSP
# https://ssl-config.mozilla.org/#server=haproxy&version=2.1.4&config=intermediate&openssl=1.1.1&ocsp=false&guideline=5.4
    # intermediate configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    tune.ssl.default-dh-param 4096 


#---------------------------------------------------------------------
# Do not change this section if is not really needed!
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  redispatch
    timeout connect         25s
    timeout client          1m
    timeout server          10m
    timeout client-fin      10s
    timeout server-fin      10m
    timeout http-request    30s
    timeout http-keep-alive 50s
    timeout queue           15s
    timeout tunnel          10h
    retries                 3
    timeout check           30s

# The frontend only listens on port 80
# If it detects a LetsEncrypt request, is uses the LE backend
# Else it goes to the default backend for the web servers


#---------------------------------------------------------------------
# Frontend HTTPS Configuration
#---------------------------------------------------------------------

frontend www-https
    mode http
    log global
    bind *:443 ssl crt-list /etc/haproxy/crt-list.txt
    maxconn 4800
    redirect scheme https code 301 if !{ ssl_fc }

#Blacklist IP list
    #http-request deny if { src -f /etc/haproxy/blacklist/ip.lst }

#Blacklist User Agent list
    #http-request deny if { req.hdr(user-agent) -i -m sub -f /etc/haproxy/blacklist/user-agent.lst }
    #deny if user-agent is empty
    #http-request deny unless { req.hdr(user-agent) -m found }

# deny requests if they use HTTP 1.0
    http-request deny if HTTP_1.0

# log4j CVE-2021-44228 vulnerability
    acl log4shell url -m reg \${[^}]*\${
    acl log4shell url -m reg \${jndi:(?:ldaps?|iiop|dns|rmi)://
    acl log4shell url -i -m reg \${[\w${}\-:]*j[\w${}\-:]*n[\w${}\-:]*d[\w${}\-:]*i[\w${}\-:]*:.*}
    acl log4shell req.hdr -m reg \${[^}]*\${
    acl log4shell req.hdr -m reg \${jndi:(?:ldaps?|iiop|dns|rmi)://
    acl log4shell req.hdr -i -m reg \${[\w${}\-:]*j[\w${}\-:]*n[\w${}\-:]*d[\w${}\-:]*i[\w${}\-:]*:.*}
    http-request deny if log4shell

#  OpenShift URLs
    acl host_shift       hdr_end(host) -i     {domain1}
    acl host_jenkins        hdr(host) -i     {domain2}


    use_backend backend_shift if host_shift
    use_backend backend_jenkins if host_jenkins

    default_backend no-match
   


# LE Backend
backend letsencrypt-backend
        server letsencrypt 127.0.0.1:8888

backend backend_shift
        balance source
        option forwardfor
        http-request set-header X-Forwarded-For %[src]
        http-request set-header X-Forwarded-Port %[dst_port]
        http-request add-header X-Forwarded-Proto https if { ssl_fc }
        server shift {private_ip_2}:31391 check ssl verify none

backend backend_jenkins
        option forwardfor
        mode http
        http-request set-header X-Forwarded-Port %[dst_port]
        http-request add-header X-Forwarded-Proto https if { ssl_fc }
        http-request set-header X-Forwarded-Host %[req.hdr(Host)]
        server jenkins {private_ip_haproxy}:8080

#---------------------------------------------------------------------
# Statistics
#---------------------------------------------------------------------        

#frontend stat
#    mode http
#    bind *:80 
#    stats enable
#    stats uri /
#    stats refresh 10s
#    stats hide-version
#    stats auth admin:1234
#    stats realm Haproxy\ Statistic
#
#    acl host_haproxy       hdr(host) -i   {domain3}
#    use_backend backend_haproxy if host_haproxy
#
#backend backend_haproxy
#        server haproxy   {private_ip_haproxy}:8400
#Default
backend no-match
    http-request deny
